# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpcservice.services_pb2 as services__pb2

class CacheServiceStub(object):
    """Cache Memory Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.save = channel.unary_unary(
                '/CacheService/save',
                request_serializer=services__pb2.CacheItem.SerializeToString,
                response_deserializer=services__pb2.Empty.FromString,
                )
        self.addcachedlifetime = channel.unary_unary(
                '/CacheService/addcachedlifetime',
                request_serializer=services__pb2.CachedLife.SerializeToString,
                response_deserializer=services__pb2.Empty.FromString,
                )
        self.get_hitrate_trend = channel.unary_unary(
                '/CacheService/get_hitrate_trend',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.ListOfFloat.FromString,
                )
        self.updatecachedlifetime = channel.unary_unary(
                '/CacheService/updatecachedlifetime',
                request_serializer=services__pb2.CachedLife.SerializeToString,
                response_deserializer=services__pb2.Empty.FromString,
                )
        self.is_cached = channel.unary_unary(
                '/CacheService/is_cached',
                request_serializer=services__pb2.EntityAttributePair.SerializeToString,
                response_deserializer=services__pb2.BoolType.FromString,
                )
        self.get_statistics_all = channel.unary_unary(
                '/CacheService/get_statistics_all',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.FrequencyTable.FromString,
                )
        self.get_last_hitrate = channel.unary_unary(
                '/CacheService/get_last_hitrate',
                request_serializer=services__pb2.CacheResponse.SerializeToString,
                response_deserializer=services__pb2.ListOfFloat.FromString,
                )
        self.get_statistics = channel.unary_unary(
                '/CacheService/get_statistics',
                request_serializer=services__pb2.EntityAttributePair.SerializeToString,
                response_deserializer=services__pb2.Statistic.FromString,
                )
        self.removeentitycachedlifetime = channel.unary_unary(
                '/CacheService/removeentitycachedlifetime',
                request_serializer=services__pb2.CacheResponse.SerializeToString,
                response_deserializer=services__pb2.Empty.FromString,
                )
        self.removecachedlifetime = channel.unary_unary(
                '/CacheService/removecachedlifetime',
                request_serializer=services__pb2.EntityAttributePair.SerializeToString,
                response_deserializer=services__pb2.Empty.FromString,
                )
        self.get_statistics_entity = channel.unary_unary(
                '/CacheService/get_statistics_entity',
                request_serializer=services__pb2.CacheResponse.SerializeToString,
                response_deserializer=services__pb2.FrequencyTable.FromString,
                )
        self.get_attributes_of_entity = channel.unary_unary(
                '/CacheService/get_attributes_of_entity',
                request_serializer=services__pb2.CacheResponse.SerializeToString,
                response_deserializer=services__pb2.ListOfString.FromString,
                )
        self.get_value_by_key = channel.unary_unary(
                '/CacheService/get_value_by_key',
                request_serializer=services__pb2.EntityAttributePair.SerializeToString,
                response_deserializer=services__pb2.ListOfCachedItems.FromString,
                )
        self.get_values_for_entity = channel.unary_unary(
                '/CacheService/get_values_for_entity',
                request_serializer=services__pb2.EntityAttributeList.SerializeToString,
                response_deserializer=services__pb2.CachedRecords.FromString,
                )
        self.are_all_atts_cached = channel.unary_unary(
                '/CacheService/are_all_atts_cached',
                request_serializer=services__pb2.EntityAttributeList.SerializeToString,
                response_deserializer=services__pb2.CachedAttributes.FromString,
                )


class CacheServiceServicer(object):
    """Cache Memory Service
    """

    def save(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addcachedlifetime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_hitrate_trend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updatecachedlifetime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def is_cached(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_statistics_all(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_last_hitrate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_statistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeentitycachedlifetime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removecachedlifetime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_statistics_entity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_attributes_of_entity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_value_by_key(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_values_for_entity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def are_all_atts_cached(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CacheServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'save': grpc.unary_unary_rpc_method_handler(
                    servicer.save,
                    request_deserializer=services__pb2.CacheItem.FromString,
                    response_serializer=services__pb2.Empty.SerializeToString,
            ),
            'addcachedlifetime': grpc.unary_unary_rpc_method_handler(
                    servicer.addcachedlifetime,
                    request_deserializer=services__pb2.CachedLife.FromString,
                    response_serializer=services__pb2.Empty.SerializeToString,
            ),
            'get_hitrate_trend': grpc.unary_unary_rpc_method_handler(
                    servicer.get_hitrate_trend,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.ListOfFloat.SerializeToString,
            ),
            'updatecachedlifetime': grpc.unary_unary_rpc_method_handler(
                    servicer.updatecachedlifetime,
                    request_deserializer=services__pb2.CachedLife.FromString,
                    response_serializer=services__pb2.Empty.SerializeToString,
            ),
            'is_cached': grpc.unary_unary_rpc_method_handler(
                    servicer.is_cached,
                    request_deserializer=services__pb2.EntityAttributePair.FromString,
                    response_serializer=services__pb2.BoolType.SerializeToString,
            ),
            'get_statistics_all': grpc.unary_unary_rpc_method_handler(
                    servicer.get_statistics_all,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.FrequencyTable.SerializeToString,
            ),
            'get_last_hitrate': grpc.unary_unary_rpc_method_handler(
                    servicer.get_last_hitrate,
                    request_deserializer=services__pb2.CacheResponse.FromString,
                    response_serializer=services__pb2.ListOfFloat.SerializeToString,
            ),
            'get_statistics': grpc.unary_unary_rpc_method_handler(
                    servicer.get_statistics,
                    request_deserializer=services__pb2.EntityAttributePair.FromString,
                    response_serializer=services__pb2.Statistic.SerializeToString,
            ),
            'removeentitycachedlifetime': grpc.unary_unary_rpc_method_handler(
                    servicer.removeentitycachedlifetime,
                    request_deserializer=services__pb2.CacheResponse.FromString,
                    response_serializer=services__pb2.Empty.SerializeToString,
            ),
            'removecachedlifetime': grpc.unary_unary_rpc_method_handler(
                    servicer.removecachedlifetime,
                    request_deserializer=services__pb2.EntityAttributePair.FromString,
                    response_serializer=services__pb2.Empty.SerializeToString,
            ),
            'get_statistics_entity': grpc.unary_unary_rpc_method_handler(
                    servicer.get_statistics_entity,
                    request_deserializer=services__pb2.CacheResponse.FromString,
                    response_serializer=services__pb2.FrequencyTable.SerializeToString,
            ),
            'get_attributes_of_entity': grpc.unary_unary_rpc_method_handler(
                    servicer.get_attributes_of_entity,
                    request_deserializer=services__pb2.CacheResponse.FromString,
                    response_serializer=services__pb2.ListOfString.SerializeToString,
            ),
            'get_value_by_key': grpc.unary_unary_rpc_method_handler(
                    servicer.get_value_by_key,
                    request_deserializer=services__pb2.EntityAttributePair.FromString,
                    response_serializer=services__pb2.ListOfCachedItems.SerializeToString,
            ),
            'get_values_for_entity': grpc.unary_unary_rpc_method_handler(
                    servicer.get_values_for_entity,
                    request_deserializer=services__pb2.EntityAttributeList.FromString,
                    response_serializer=services__pb2.CachedRecords.SerializeToString,
            ),
            'are_all_atts_cached': grpc.unary_unary_rpc_method_handler(
                    servicer.are_all_atts_cached,
                    request_deserializer=services__pb2.EntityAttributeList.FromString,
                    response_serializer=services__pb2.CachedAttributes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CacheService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CacheService(object):
    """Cache Memory Service
    """

    @staticmethod
    def save(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/save',
            services__pb2.CacheItem.SerializeToString,
            services__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addcachedlifetime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/addcachedlifetime',
            services__pb2.CachedLife.SerializeToString,
            services__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_hitrate_trend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/get_hitrate_trend',
            services__pb2.Empty.SerializeToString,
            services__pb2.ListOfFloat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updatecachedlifetime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/updatecachedlifetime',
            services__pb2.CachedLife.SerializeToString,
            services__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def is_cached(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/is_cached',
            services__pb2.EntityAttributePair.SerializeToString,
            services__pb2.BoolType.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_statistics_all(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/get_statistics_all',
            services__pb2.Empty.SerializeToString,
            services__pb2.FrequencyTable.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_last_hitrate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/get_last_hitrate',
            services__pb2.CacheResponse.SerializeToString,
            services__pb2.ListOfFloat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_statistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/get_statistics',
            services__pb2.EntityAttributePair.SerializeToString,
            services__pb2.Statistic.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeentitycachedlifetime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/removeentitycachedlifetime',
            services__pb2.CacheResponse.SerializeToString,
            services__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removecachedlifetime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/removecachedlifetime',
            services__pb2.EntityAttributePair.SerializeToString,
            services__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_statistics_entity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/get_statistics_entity',
            services__pb2.CacheResponse.SerializeToString,
            services__pb2.FrequencyTable.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_attributes_of_entity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/get_attributes_of_entity',
            services__pb2.CacheResponse.SerializeToString,
            services__pb2.ListOfString.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_value_by_key(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/get_value_by_key',
            services__pb2.EntityAttributePair.SerializeToString,
            services__pb2.ListOfCachedItems.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_values_for_entity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/get_values_for_entity',
            services__pb2.EntityAttributeList.SerializeToString,
            services__pb2.CachedRecords.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def are_all_atts_cached(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CacheService/are_all_atts_cached',
            services__pb2.EntityAttributeList.SerializeToString,
            services__pb2.CachedAttributes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
